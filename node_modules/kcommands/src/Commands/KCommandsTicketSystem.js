const Discord = require('discord.js')
const sourcebin = require("sourcebin")

class KCommandsTicketSystem {
    constructor(options = {}) {
        if (!options.channelmsg) return console.log("[KCommands] Ticket System channel message is not specify")
        if (!options.ticketmsg) return console.log("[KCommands] Ticket System ticket message is not specify")
        if (!options.lock) return console.log("[KCommands] Ticket System lock ticket emoji is not specify")
        if (!options.delete) return console.log("[KCommands] Ticket System delete ticket emoji is not specify")
        if (!options.transcriptchannelid) return console.log("[KCommands] TicketSystem transcript channel id is not specify")
        if (!typeof(options.transcript) == Boolean) return console.log("[KCommands] Ticket System transcript ticket is not specify")
        let tname;
        if(!options.ticketname) tname = `ticket`
        if(options.ticketname) tname = options.ticketname
        this.channelmsg = options.channelmsg
        this.ticketmsg = options.ticketmsg
        this.ticketname = tname
        this.lock = options.lock
        this.delete = options.delete
        this.transcript = options.transcript
        this.transcriptchannelid = options.transcriptchannelid
    }
    async openTicket(client, message) {
      const context = ["KCommandsTicketSystem:: Transcript"];
        const {
            MessageEmbed
        } = require('discord.js');

        const channel = await message.guild.channels.create(this.ticketname);

        channel.updateOverwrite(message.guild.id, {
            SEND_MESSAGE: false,
            VIEW_CHANNEL: false,
        });
        channel.updateOverwrite(message.author, {
            SEND_MESSAGE: true,
            VIEW_CHANNEL: true,
        });

        const support = new MessageEmbed()
            .setDescription(this.ticketmsg.replace("{userMentions}", message.member).replace("{userName}", message.author.username).replace("{userID}", message.member.id))

            message.channel
            .send(this.channelmsg.replace("{channelMentions}", channel).replace("{channelName}", channel.name).replace("{channelID}", channel.id))

        const msg = await channel.send(support)

        client.on("message", (message) => {
          if(message.channel.id == channel.id) {
            const attachment = message.attachments.first();
            if(message.content) {
              context.push(`${message.author.tag}:: ${message.content}`)
            }
            if(attachment) {
              context.push(`${message.author.tag}:: ${attachment.url || attachment.proxuURL} (Attachement)`)
            }
          }
        })

        try {
            await msg.react(this.lock);
            await msg.react(this.delete);
          } catch (err) {
            channel.send("Error sending emojis!");
            throw err;
          }
      
          const collector = msg.createReactionCollector(
            (reaction, user) => message.guild.members.cache.find((member) => member.id === user.id),
            { dispose: true }
          );
      
          collector.on("collect", async (reaction, user) => {
            switch (reaction.emoji.name) {
              case this.lock:
                channel.updateOverwrite(message.guild.id, { SEND_MESSAGES: false });
                channel.send("Locked ticket")
                if(this.transcript == true) {
                  const bin = await sourcebin.create(
                    [
                        {
                            content: context.join("\n"),
                            language: 'AsciiDoc',
                        },
                    ],
                    {
                        title: 'KCommands',
                        description: 'Ticket System Transcript',
                    },
                );
                channel.send("Transcript: " + bin.url)
                }
                break;
              case this.delete:
                const tranchannel = message.guild.channels.cache.get(this.transcriptchannelid)
                channel.send("Deleting this ticket in 5 seconds!");
                setTimeout(() => channel.delete(), 5000);
                const bin = await sourcebin.create(
                  [
                      {
                          content: context.join("\n"),
                          language: 'AsciiDoc',
                      },
                  ],
                  {
                      title: 'KCommands',
                      description: 'Ticket System Transcript',
                  },
                )
                const newEmbedTranscript = new Discord.MessageEmbed()
                  .setTitle("Ticket System")
                  .setDescription(`Ticket close: ${message.author.tag}\nTranscript: ${bin.url}`)
                tranchannel.send({
                  embed: newEmbedTranscript
                })
                break;
            }
          });
    }
}

module.exports = {
    KCommandsTicketSystem
}